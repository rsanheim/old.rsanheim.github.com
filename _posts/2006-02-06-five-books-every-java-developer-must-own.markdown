--- 
wordpress_id: 137
layout: post
title: Five books every Java developer must own
wordpress_url: http://www.robsanheim.com/?p=137
---
<b>Update: </b>Welcome, <a href="http://www.javalobby.org/java/forums/t63330.html">Javalobby readers!</a>  You might be interested in the <a href="http://www.robsanheim.com/2006/02/09/eight-more-essential-books-for-developers/">followup</a> to this post.  Thanks for the great feedback and suggestions.

<ul>
<li><a href="http://www.amazon.com/exec/obidos/redirect?tag=panasonicyout-20%26link_code=xm2%26camp=2025%26creative=165953%26path=http://www.amazon.com/gp/redirect.html%253fASIN=020161622X%2526tag=panasonicyout-20%2526lcode=xm2%2526cID=2025%2526ccmID=165953%2526location=/o/ASIN/020161622X%25253FSubscriptionId=0EMV44A9A5YT1RVDGZ82" title="view product details at Amazon">Pragmatic Programmer</a> by Andrew Hunt and David Thomas<br />This is absolutely required reading for any software developer, regardless of language.  If you are lost when people are talking about "keeping it DRY" or the danger of broken windows, you need this book.
</li>

<li><a href="http://www.amazon.com/exec/obidos/redirect?tag=panasonicyout-20%26link_code=xm2%26camp=2025%26creative=165953%26path=http://www.amazon.com/gp/redirect.html%253fASIN=0201310058%2526tag=panasonicyout-20%2526lcode=xm2%2526cID=2025%2526ccmID=165953%2526location=/o/ASIN/0201310058%25253FSubscriptionId=0EMV44A9A5YT1RVDGZ82">Effective Java</a> by Joshua Bloch
Effective Java is absolutely crucial if you create any APIs, and if you ever see <code>public class...</code> you are writing APIs, whether its for a team of one or one thousand.  Bloch covers issues 
<a href="http://www.amazon.com/exec/obidos/redirect?tag=panasonicyout-20%26link_code=xm2%26camp=2025%26creative=165953%26path=http://www.amazon.com/gp/redirect.html%253fASIN=0201310058%2526tag=panasonicyout-20%2526lcode=xm2%2526cID=2025%2526ccmID=165953%2526location=/o/ASIN/0201310058%25253FSubscriptionId=0EMV44A9A5YT1RVDGZ82" title="View product details at Amazon"><img class="right" src="http://images.amazon.com/images/P/0201310058.01._SCMZZZZZZZ_.jpg" alt="Effective Java Programming Language Guide" /></a>like immutability, properly implementing equals and hashCode, the benefits of composition over inheritance, and the value of static factory methods.  He talks about all sort of common beginner mistakes such as using interfaces for constants, using float or double when you need absolute precision, overuse of Strings, and crappy singleton implementations.  After you've read this, listen to the <a href="http://javaposse.com/index.php?post_id=29225">JavaPosse interview</a> with Bloch to hear how about a possible second edition and take a look at <a href="http://www.amazon.com/exec/obidos/redirect?tag=panasonicyout-20%26link_code=xm2%26camp=2025%26creative=165953%26path=http://www.amazon.com/gp/redirect.html%253fASIN=032133678X%2526tag=panasonicyout-20%2526lcode=xm2%2526cID=2025%2526ccmID=165953%2526location=/o/ASIN/032133678X%25253FSubscriptionId=0EMV44A9A5YT1RVDGZ82" title="View product details at Amazon">Java Puzzlers</a> for fun gotchas found in Java.
</li>

<li><a href="http://www.amazon.com/exec/obidos/redirect?tag=panasonicyout-20%26link_code=xm2%26camp=2025%26creative=165953%26path=http://www.amazon.com/gp/redirect.html%253fASIN=0201633612%2526tag=panasonicyout-20%2526lcode=xm2%2526cID=2025%2526ccmID=165953%2526location=/o/ASIN/0201633612%25253FSubscriptionId=0EMV44A9A5YT1RVDGZ82" title="View product details at Amazon"><img class="right" src="http://images.amazon.com/images/P/0201633612.01._SCMZZZZZZZ_.jpg" alt="Design Patterns: Elements of Reusable Object-Oriented Software (Addison-Wesley Professional Computing Series)" /></a><a href="http://www.amazon.com/exec/obidos/redirect?tag=panasonicyout-20%26link_code=xm2%26camp=2025%26creative=165953%26path=http://www.amazon.com/gp/redirect.html%253fASIN=0201633612%2526tag=panasonicyout-20%2526lcode=xm2%2526cID=2025%2526ccmID=165953%2526location=/o/ASIN/0201633612%25253FSubscriptionId=0EMV44A9A5YT1RVDGZ82" title="View product details at Amazon">Design Patterns</a> by the GoF
Design Patterns is by the Gang of Four (GOF) is often lauded as a classic read for anyone doing OO development, whether the language be Smalltalk, C++, or Java.  If you aren't familiar with Design Patterns but have been doing OO for awhile, you have already been using some of the patterns without knowing it.  Having a common vocabularily to share with others is very powerful, so know the 26 classic patterns is important for any Java developer today.</li>

<li><a href="http://www.amazon.com/exec/obidos/redirect?tag=panasonicyout-20%26link_code=xm2%26camp=2025%26creative=165953%26path=http://www.amazon.com/gp/redirect.html%253fASIN=0321278658%2526tag=panasonicyout-20%2526lcode=xm2%2526cID=2025%2526ccmID=165953%2526location=/o/ASIN/0321278658%25253FSubscriptionId=0EMV44A9A5YT1RVDGZ82" title="View product details at Amazon"><img class="right" src="http://images.amazon.com/images/P/0321278658.01._SCMZZZZZZZ_.jpg" alt="Extreme Programming Explained : Embrace Change (2nd Edition)" /></a><a href="http://www.amazon.com/exec/obidos/redirect?tag=panasonicyout-20%26link_code=xm2%26camp=2025%26creative=165953%26path=http://www.amazon.com/gp/redirect.html%253fASIN=0321278658%2526tag=panasonicyout-20%2526lcode=xm2%2526cID=2025%2526ccmID=165953%2526location=/o/ASIN/0321278658%25253FSubscriptionId=0EMV44A9A5YT1RVDGZ82">Extreme Programming Explained: Embrace Change</a></li> by Kent Beck and Cynthia Andres
When I first read XP: Explained, so many of the concepts made me nod my head in agreement and wonder how typical software development goes against so many of its principles.  XP and agile isn't rocket science or a silver bullet, its just good common sense.  "Take small steps, one at a time.  Communication is vital.  Feedback is important.  Change is constant, so work with it instead of fighting it."  It sounds like advice your mom or grandpa gave you when you were eight years old, so why does it take a "revolution" or a "movement" to put these things into practice for software development?  That might be a topic for another essay, so for now just get this book.  Its essential for understanding the ideas behind XP and agility.

Note that the second edition is quite different from the first - it has a broader, less technical apporach.  They are both worth reading, the first moreso for programmers and the second for customers and managers.

<li><a href="http://www.amazon.com/exec/obidos/redirect?tag=panasonicyout-20%26link_code=xm2%26camp=2025%26creative=165953%26path=http://www.amazon.com/gp/redirect.html%253fASIN=1590592395%2526tag=panasonicyout-20%2526lcode=xm2%2526cID=2025%2526ccmID=165953%2526location=/o/ASIN/1590592395%25253FSubscriptionId=0EMV44A9A5YT1RVDGZ82" title="View product details at Amazon"><img class="right" src="http://images.amazon.com/images/P/1590592395.01._SCMZZZZZZZ_.jpg" alt="Practical Common Lisp" /></a><a href="http://www.amazon.com/exec/obidos/redirect?tag=panasonicyout-20%26link_code=xm2%26camp=2025%26creative=165953%26path=http://www.amazon.com/gp/redirect.html%253fASIN=0974514055%2526tag=panasonicyout-20%2526lcode=xm2%2526cID=2025%2526ccmID=165953%2526location=/o/ASIN/0974514055%25253FSubscriptionId=0EMV44A9A5YT1RVDGZ82" title="View product details at Amazon">Programming Ruby</a> by Dave Thomas et al, or <a href="http://www.amazon.com/exec/obidos/redirect?tag=panasonicyout-20%26link_code=xm2%26camp=2025%26creative=165953%26path=http://www.amazon.com/gp/redirect.html%253fASIN=1590592395%2526tag=panasonicyout-20%2526lcode=xm2%2526cID=2025%2526ccmID=165953%2526location=/o/ASIN/1590592395%25253FSubscriptionId=0EMV44A9A5YT1RVDGZ82"> Practical Common Lisp</a>, or <a href="http://www.amazon.com/exec/obidos/redirect?tag=panasonicyout-20%26link_code=xm2%26camp=2025%26creative=165953%26path=http://www.amazon.com/gp/redirect.html%253fASIN=0596002815%2526tag=panasonicyout-20%2526lcode=xm2%2526cID=2025%2526ccmID=165953%2526location=/o/ASIN/0596002815%25253FSubscriptionId=0EMV44A9A5YT1RVDGZ82" title="View product details at Amazon">Learning Python</a> or...
The fifth book in this list really isn't a specific book at all, but a more general recommendation to get a book about a language very different from the Java/C# family.  Learn one of the hot dynamically typed languages all the kdis love these days, like Ruby or Python.   If those are old hat, pick up the <a href="http://www.amazon.com/exec/obidos/redirect?tag=panasonicyout-20%26link_code=xm2%26camp=2025%26creative=165953%26path=http://www.amazon.com/gp/redirect.html%253fASIN=0521644089%2526tag=panasonicyout-20%2526lcode=xm2%2526cID=2025%2526ccmID=165953%2526location=/o/ASIN/0521644089%25253FSubscriptionId=0EMV44A9A5YT1RVDGZ82" title="View product details at Amazon">The Haskell School of Expression</a> if the<a href="http://www.haskell.org/tutorial/"> online tutorial</a> seems interesting.  Or maybe Graham's <a href="http://paulgraham.com/onlisp.html">On Lisp</a>, which recently put online for free.  Just learn a language that forces you think in a different way from Java.  Even if your day job continues to be Java, knowing how you would solve a problem in Ruby or Lisp will only make you a better programmer.</li>
</ul>

Note what <strong>isn't</strong> on the list: any of the Java 5 reference books or any of the tens (hundreds?) of J2EE books.  Its important to keep up with the language and the platform, but I think thats better done through programming with the <a href="http://java.sun.com/j2se/1.5.0/docs/api/index.html">JDK</a> and <a href="http://mindprod.com/jgloss/jgloss.html">examples</a> as reference.  The reference books can be helpful for getting up to speed for day to day work, but I don't think they are essential for furthering your knowledge or your craft.  Long after your J2EE 1.4.x.niner book is collecting dust on the shelf, Effective Java will still be a reference you consult  regularly.
